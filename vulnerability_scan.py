import requests
import socket
import ssl

def check_vulnerabilities(domain, open_ports):
    vulnerabilities = {
        "open_services": [],
        "ssl_issues": [],
        "security_headers": [],
        "potential_risks": []
    }
    
    for port in open_ports:
        if port == 21:
            vulnerabilities["open_services"].append("FTP (Port 21) - Consider using SFTP")
        elif port == 23:
            vulnerabilities["open_services"].append("Telnet (Port 23) - Insecure, use SSH")
        elif port == 3389:
            vulnerabilities["open_services"].append("RDP (Port 3389) - Remote Desktop Protocol")
        elif port == 5900:
            vulnerabilities["open_services"].append("VNC (Port 5900) - Virtual Network Computing")
    
    try:
        context = ssl.create_default_context()
        with socket.create_connection((domain, 443), timeout=5) as sock:
            with context.wrap_socket(sock, server_hostname=domain) as ssock:
                cert = ssock.getpeercert()
                
                if not cert:
                    vulnerabilities["ssl_issues"].append("No SSL certificate found")
                else:
                    if 'notAfter' in cert:
                        vulnerabilities["ssl_issues"].append(f"Certificate expires: {cert['notAfter']}")
                    
                    if 'subjectAltName' not in cert:
                        vulnerabilities["ssl_issues"].append("No Subject Alternative Names")
    except:
        vulnerabilities["ssl_issues"].append("SSL/TLS connection failed")
    
    try:
        response = requests.get(f"https://{domain}", timeout=10)
        headers = response.headers
        
        security_headers = [
            'X-Frame-Options', 'X-Content-Type-Options', 'X-XSS-Protection',
            'Strict-Transport-Security', 'Content-Security-Policy'
        ]
        
        for header in security_headers:
            if header not in headers:
                vulnerabilities["security_headers"].append(f"Missing {header} header")
    except:
        vulnerabilities["security_headers"].append("Could not check security headers")
    
    if len(open_ports) > 10:
        vulnerabilities["potential_risks"].append("Many open ports - consider closing unnecessary services")
    
    return vulnerabilities 