import requests
import socket
import ssl
from datetime import datetime, timedelta

def check_vulnerabilities(domain, open_ports):
    vulnerabilities = {
        "open_services": [],
        "ssl_issues": [],
        "security_headers": [],
        "potential_risks": [],
        "summary": {
            "total_vulnerabilities": 0,
            "high_severity": 0,
            "medium_severity": 0,
            "low_severity": 0,
            "status": "CLEAN"
        }
    }
    
    # Check for risky open services
    risky_ports = {
        21: ("FTP", "HIGH", "FTP (Port 21) - Insecure protocol, consider using SFTP"),
        23: ("Telnet", "HIGH", "Telnet (Port 23) - Insecure, use SSH instead"),
        3389: ("RDP", "MEDIUM", "RDP (Port 3389) - Remote Desktop Protocol, ensure proper security"),
        5900: ("VNC", "HIGH", "VNC (Port 5900) - Virtual Network Computing, often insecure"),
        22: ("SSH", "LOW", "SSH (Port 22) - Secure, but ensure key-based authentication"),
        1433: ("MSSQL", "MEDIUM", "MSSQL (Port 1433) - Database server, ensure proper access controls"),
        3306: ("MySQL", "MEDIUM", "MySQL (Port 3306) - Database server, ensure proper access controls"),
        5432: ("PostgreSQL", "MEDIUM", "PostgreSQL (Port 5432) - Database server, ensure proper access controls")
    }
    
    for port in open_ports:
        if port in risky_ports:
            service, severity, description = risky_ports[port]
            vulnerabilities["open_services"].append({
                "port": port,
                "service": service,
                "severity": severity,
                "description": description
            })
            if severity == "HIGH":
                vulnerabilities["summary"]["high_severity"] += 1
            elif severity == "MEDIUM":
                vulnerabilities["summary"]["medium_severity"] += 1
            else:
                vulnerabilities["summary"]["low_severity"] += 1

    try:
        context = ssl.create_default_context()
        with socket.create_connection((domain, 443), timeout=5) as sock:
            with context.wrap_socket(sock, server_hostname=domain) as ssock:
                cert = ssock.getpeercert()
                
                if not cert:
                    vulnerabilities["ssl_issues"].append({
                        "issue": "No SSL certificate found",
                        "severity": "HIGH",
                        "description": "No SSL certificate detected on port 443"
                    })
                    vulnerabilities["summary"]["high_severity"] += 1
                else:
                    # Check certificate expiration
                    if 'notAfter' in cert:
                        expiry_date = datetime.strptime(cert['notAfter'], '%b %d %H:%M:%S %Y %Z')
                        days_until_expiry = (expiry_date - datetime.now()).days
                        
                        if days_until_expiry < 0:
                            vulnerabilities["ssl_issues"].append({
                                "issue": "Certificate expired",
                                "severity": "HIGH",
                                "description": f"SSL certificate expired on {cert['notAfter']}"
                            })
                            vulnerabilities["summary"]["high_severity"] += 1
                        elif days_until_expiry < 30:
                            vulnerabilities["ssl_issues"].append({
                                "issue": "Certificate expiring soon",
                                "severity": "MEDIUM",
                                "description": f"SSL certificate expires in {days_until_expiry} days on {cert['notAfter']}"
                            })
                            vulnerabilities["summary"]["medium_severity"] += 1
                        else:
                            vulnerabilities["ssl_issues"].append({
                                "issue": "Certificate valid",
                                "severity": "INFO",
                                "description": f"Certificate expires: {cert['notAfter']}"
                            })
 
                    if 'subjectAltName' not in cert:
                        vulnerabilities["ssl_issues"].append({
                            "issue": "No Subject Alternative Names",
                            "severity": "MEDIUM",
                            "description": "SSL certificate missing Subject Alternative Names (SAN)"
                        })
                        vulnerabilities["summary"]["medium_severity"] += 1
    except Exception as e:
        vulnerabilities["ssl_issues"].append({
            "issue": "SSL/TLS connection failed",
            "severity": "MEDIUM",
            "description": f"Could not establish SSL connection: {str(e)}"
        })
        vulnerabilities["summary"]["medium_severity"] += 1
    
    try:
        response = requests.get(f"https://{domain}", timeout=10)
        headers = response.headers
        
        security_headers = {
            'X-Frame-Options': ('HIGH', 'Prevents clickjacking attacks'),
            'X-Content-Type-Options': ('MEDIUM', 'Prevents MIME type sniffing'),
            'X-XSS-Protection': ('MEDIUM', 'Basic XSS protection'),
            'Strict-Transport-Security': ('HIGH', 'Enforces HTTPS connections'),
            'Content-Security-Policy': ('HIGH', 'Prevents XSS and injection attacks'),
            'Referrer-Policy': ('LOW', 'Controls referrer information'),
            'Permissions-Policy': ('MEDIUM', 'Controls browser features')
        }
        
        for header, (severity, description) in security_headers.items():
            if header not in headers:
                vulnerabilities["security_headers"].append({
                    "header": header,
                    "severity": severity,
                    "description": f"Missing {header} header - {description}"
                })
                if severity == "HIGH":
                    vulnerabilities["summary"]["high_severity"] += 1
                elif severity == "MEDIUM":
                    vulnerabilities["summary"]["medium_severity"] += 1
                else:
                    vulnerabilities["summary"]["low_severity"] += 1
    except Exception as e:
        vulnerabilities["security_headers"].append({
            "header": "Connection Error",
            "severity": "MEDIUM",
            "description": f"Could not check security headers: {str(e)}"
        })
        vulnerabilities["summary"]["medium_severity"] += 1
    
    if len(open_ports) > 10:
        vulnerabilities["potential_risks"].append({
            "risk": "Many open ports",
            "severity": "MEDIUM",
            "description": f"Found {len(open_ports)} open ports - consider closing unnecessary services"
        })
        vulnerabilities["summary"]["medium_severity"] += 1
    
    if 80 in open_ports and 443 not in open_ports:
        vulnerabilities["potential_risks"].append({
            "risk": "HTTP without HTTPS",
            "severity": "HIGH",
            "description": "HTTP (port 80) is open but HTTPS (port 443) is not - traffic is unencrypted"
        })
        vulnerabilities["summary"]["high_severity"] += 1

    total_vulns = (vulnerabilities["summary"]["high_severity"] + 
                   vulnerabilities["summary"]["medium_severity"] + 
                   vulnerabilities["summary"]["low_severity"])
    
    vulnerabilities["summary"]["total_vulnerabilities"] = total_vulns

    if vulnerabilities["summary"]["high_severity"] > 0:
        vulnerabilities["summary"]["status"] = "CRITICAL"
    elif vulnerabilities["summary"]["medium_severity"] > 0:
        vulnerabilities["summary"]["status"] = "WARNING"
    elif vulnerabilities["summary"]["low_severity"] > 0:
        vulnerabilities["summary"]["status"] = "INFO"
    else:
        vulnerabilities["summary"]["status"] = "CLEAN"
    
    return vulnerabilities 